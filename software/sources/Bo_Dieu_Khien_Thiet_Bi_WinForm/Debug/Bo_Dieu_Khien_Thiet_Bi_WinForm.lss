
Bo_Dieu_Khien_Thiet_Bi_WinForm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000011e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005c6  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000054e  00000000  00000000  00000772  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f8  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000329  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001205  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
int main(void)
{
	/**************************************************************************
	Cấu hình PORTC là là đầu ra và giá giá trị ban đầu PORTC = 0 (tắt toàn bộ)
	**************************************************************************/
	DDRC = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  80:	15 ba       	out	0x15, r1	; 21
	+ UBRESL = 1: UCSRC được sử dụng, URSEL = 0: UBRRH được sử dụng
	+ UBRRL: Cài đặt tốc độ baud  
	UBRR = (Fosc / (16 * baud)) - 1
	Ví dụ: UBRR = (16000000 / (16 * 9600)) - 1 = 103 = 0x67
	**************************************************************************/
	UCSRB = (1 << TXEN) | (1 << RXEN);
  82:	88 e1       	ldi	r24, 0x18	; 24
  84:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<< UCSZ1) | (1 << UCSZ0) | (1 << URSEL);
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x67;
  8a:	87 e6       	ldi	r24, 0x67	; 103
  8c:	89 b9       	out	0x09, r24	; 9
	{
		/**************************************************************************
		Chờ cho đến khi bit RXC (nhận thành công) trong thanh ghi UCSRA = 1
		thì đọc dữ liệu UART
		**************************************************************************/
		while(!(UCSRA & (1 << RXC)));
  8e:	5f 9b       	sbis	0x0b, 7	; 11
  90:	fe cf       	rjmp	.-4      	; 0x8e <main+0x12>
		c = UDR;
  92:	8c b1       	in	r24, 0x0c	; 12
  94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		/**************************************************************************
		Đặt giá trị PORTC là byte vừa nhận được
		**************************************************************************/
		PORTC = c;
  98:	85 bb       	out	0x15, r24	; 21
		
		/**************************************************************************
		Chờ cho đến khi bit UDRXE (dữ liệu rỗng) trong thanh ghi UCSRA = 1
		thì gửi dữ liệu phản hồi UART
		**************************************************************************/
		while (!(UCSRA & (1 << UDRE)));
  9a:	5d 9b       	sbis	0x0b, 5	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x1e>
		UDR = c;
  9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a2:	8c b9       	out	0x0c, r24	; 12
	}
  a4:	f4 cf       	rjmp	.-24     	; 0x8e <main+0x12>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
